<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 默认不使用注解 开启注解，可以使用基于注解的自动装配  -->
    <!--<context:annotation-config/>-->
    <!-- 包扫描 会扫描指定的包及其子包，并查找出能够自动注册为Srping Bean的类
        默认情况下，查找使用构造型stereotype注解所标注的类
        @Component 通用的构造型注解，标示该类为Spring组件
        @Controller 标示将该类定义为SpringMVC controller
        @Service 标示将该类定义为服务
        使用@Component标注的任意自定义注解
    -->


    <context:component-scan base-package="com.springinaction.bean" />

    <bean id="knight" class="com.springinaction.knights.BraveKnight">
        <constructor-arg ref="quest"></constructor-arg>
    </bean>
    <bean id="quest" class="com.springinaction.knights.SlayDragonQuest"></bean>



    <!--
        声明一个切面
        使用SpringAop配置的命名空间把Minstrel Bean声明一个切面
        1. 必须先把Minstrel声明为一个Bean,然后在<aop:aspect>元素中引用该bean.
        2. 为了进一步定义切面，必须使用<aop:before>来声明在embarOnQuest()方法执行前调用minstral的singBeforeQuest(),称为前置通知
           同时还必须使用<aop:after>声明在embarOnQuest()方法执行后调用singAfterQuest()方法，称为后置通知
        3. 在这两种方式中，pointcut-ref属性都引用了名为embark的切入点，该切入点在<aop:pointcut>元素中定义，并配置expression属性来选择所应用的通知。
           表达式语法采用AspectJ的切点表达式语言

        首先，minstel仍然是一个pojo，没有任何代码表明它要被作为一个切面使用，当配置切面后，在Spring的上下文中，minstrel实际上已经变成一个切面了
        其次，minstrel可以被应用到BraveKnight中，而BraveKnight不需要显示地调用它，实际上，BraveKnight完全不知道minstrel的存在。
        尽管你使用了Spring魔法把Minstrel转变了一个切面，但你首先要把它声明为一个Spring bean, 利用Srping AOP可以为Spring bean 做任何事情，例如为Spring bean 注入依赖

        execution 切点指示器，是唯一的执行配置，within, args, annotation... 都是限制匹配的。

     -->
    <bean id="minstrel" class="com.springinaction.knights.Minstrel"></bean>
    <aop:config>
        <aop:aspect ref="minstrel">
            <aop:pointcut id="embark" expression="execution(* *.embarkOnQuest(..)) or within(com.springinaction.bean.Instrumentalist)"/>
            <aop:before method="singBeforeQuest" pointcut-ref="embark"/>
            <aop:after method="singAfterQuest" pointcut-ref="embark"/>
        </aop:aspect>
    </aop:config>

    <!-- 杂技师
        id属性定义了bean的名字，也作为该bean在Spring容器中的引用，这个bean被称为duke,根据class属性可知，duke是一个Juggler
        当Spring容器加载该bean时，Spring将使用默认的构造器来实例化duke bean
    -->
    <bean id="duke" class="com.springinaction.bean.Juggler">
        <constructor-arg value="15"></constructor-arg>
    </bean>

    <bean id="sonnet29" class="com.springinaction.bean.Sonnet29"></bean>

    <bean id="poeticDuke" class="com.springinaction.bean.PoeticJuggler">
        <constructor-arg value="15"></constructor-arg>
        <constructor-arg ref="sonnet29"></constructor-arg>
    </bean>

    <!-- 通过setter方式注入 默认的构造函数没有song , instrument 没有歌曲和乐器是无法演奏的
        当调用perform()方法时，应用将会抛出NullPointException
    -->
    <bean id="kenny" class="com.springinaction.bean.Instrumentalist"></bean>

    <bean id="saxophone" class="com.springinaction.bean.Saxophone"></bean>

    <!-- 使用@Component 注解  -->
    <!--&lt;!&ndash; 为InstrumentaList属性 song 和 instrument setter注入值 &ndash;&gt;-->
    <!--<bean id="kenny2" class="com.springinaction.bean.Instrumentalist">-->
        <!--&lt;!&ndash;<property name="song" value="Jingle Bells"></property>&ndash;&gt;-->
        <!--&lt;!&ndash; 开启注解，使用@autowired byType自动装配-->
         <!--<property name="instrument" ref="saxophone"></property>-->
         <!--&ndash;&gt;-->
    <!--</bean>-->

    <!--使用 注解 @Component标注类，从而消除显示的bean定义-->
    <!-- @Qualifier 注解 或者 在类里添加注解-->
    <!--<bean class="com.springinaction.bean.Guitar">-->
        <!--&lt;!&ndash;<qualifier value="stringed"></qualifier>&ndash;&gt;-->
    <!--</bean>-->
    <bean id="guitar" class="com.springinaction.bean.Guitar"></bean>

    <!--
        因为Audience 类本身包含了所有它所需要定义的切点和切面，所以我们不需要要xml配置中声明切点和通知
        最后一件需要做的事是让spring将audience2应用为一个切面。我们需要在Spring上下文中声明一个自动代理Bean,该Bean知道如何把@AspectJ注解所标注的bean转变为代理通知
        为此，Spring自带了名为AnnotationAwareAspectJAutoProxyCreater的自动代理类。我们可以在Spring上下文中把AnnotationAwareAspectJAutoProxyCreater注册为一个bean
        但是我们需要敲一大段的文字，因此，为了简化如此长的名字，Spring的aop命名空间提供了一个自定义的配置元素。<aop:aspectj-autoproxy>
    -->
    <bean id="audience2" class="com.springinaction.aspect.Audience"></bean>
    <aop:aspectj-autoproxy/>



    <bean id="audience" class="com.springinaction.aop.Audience"></bean>
    <aop:config>
        <aop:aspect ref="audience">
            <aop:before pointcut="execution(* com.springinaction.bean.Performer.perform(..))" method="takeSeats"></aop:before>
            <aop:after method="turnOffCellPhone" pointcut="execution(* com.springinaction.bean.Performer.perform(..))"></aop:after>
            <aop:after-returning method="applaud" pointcut="execution(* com.springinaction.bean.Performer.perform(..))"></aop:after-returning>
            <aop:after-throwing method="demanRefund" pointcut="execution(* com.springinaction.bean.Performer.perform(..))"></aop:after-throwing>
        </aop:aspect>
    </aop:config>
    <!-- 或者 为避免重复定义切点 ，在一个地方定义切点 audience类里有处理方法 takeSeats, turnOffCellPhone, applaud, demanRefund -->
    <aop:config>
        <aop:aspect ref="audience">
            <aop:pointcut id="performer" expression="execution(* com.springinaction.bean.Performer.perform(..))"></aop:pointcut>
            <aop:before method="takeSeats" pointcut-ref="performer"></aop:before>
            <aop:after method="turnOffCellPhone" pointcut-ref="performer"></aop:after>
            <aop:after-returning method="applaud" pointcut-ref="performer"></aop:after-returning>
            <aop:after-throwing method="demanRefund" pointcut-ref="performer"></aop:after-throwing>
        </aop:aspect>
    </aop:config>

    <!-- 将通知方法的参数传递给通知 -->
    <bean id="volunteer" class="com.springinaction.aop.Volunteer"></bean>
    <bean id="magician" class="com.springinaction.aop.Magician"></bean>
    <aop:config>
        <aop:aspect ref="magician">
            <aop:pointcut id="thinking" expression="execution(* com.springinaction.aop.Thinker.thinkOfSomething(String)) and args(thoughts)"></aop:pointcut>
            <aop:before method="interceptThoughts" pointcut-ref="thinking" arg-names="thoughts"></aop:before>
        </aop:aspect>
    </aop:config>

</beans>